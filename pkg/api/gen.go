//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for MuscleGroup.
const (
	Arms      MuscleGroup = "arms"
	Back      MuscleGroup = "back"
	Chest     MuscleGroup = "chest"
	Core      MuscleGroup = "core"
	Glutes    MuscleGroup = "glutes"
	Legs      MuscleGroup = "legs"
	Shoulders MuscleGroup = "shoulders"
)

// Defines values for SuccessCode.
const (
	CREATED SuccessCode = "CREATED"
	FETCH   SuccessCode = "FETCH"
	UPDATE  SuccessCode = "UPDATE"
)

// Defines values for WeightUnit.
const (
	Kg    WeightUnit = "kg"
	Lbs   WeightUnit = "lbs"
	Other WeightUnit = "other"
)

// Defines values for WorkoutPlanStatus.
const (
	Completed WorkoutPlanStatus = "completed"
	Missed    WorkoutPlanStatus = "missed"
	Pending   WorkoutPlanStatus = "pending"
)

// Defines values for ListWorkoutPlansParamsSort.
const (
	Asc  ListWorkoutPlansParamsSort = "asc"
	Desc ListWorkoutPlansParamsSort = "desc"
)

// CompleteWorkoutPlan defines model for CompleteWorkoutPlan.
type CompleteWorkoutPlan struct {
	Comment *string `json:"comment"`
}

// CreateExercisePlan defines model for CreateExercisePlan.
type CreateExercisePlan struct {
	ExerciseId  *int64      `json:"exerciseId,omitempty"`
	Repetitions *int        `json:"repetitions,omitempty"`
	Sets        *int        `json:"sets,omitempty"`
	WeightUnit  *WeightUnit `json:"weightUnit,omitempty"`
	Weights     *float32    `json:"weights,omitempty"`
}

// CreateWorkoutPlan defines model for CreateWorkoutPlan.
type CreateWorkoutPlan struct {
	ExercisePlans *[]CreateExercisePlan `json:"exercisePlans,omitempty"`
	ScheduledDate *time.Time            `json:"scheduledDate,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Code A machine-readable error code.
	Code string `json:"code"`

	// Message A human-readable error message
	Message string `json:"message"`
}

// Exercise defines model for Exercise.
type Exercise struct {
	Description *string      `json:"description,omitempty"`
	Id          *int64       `json:"id,omitempty"`
	MuscleGroup *MuscleGroup `json:"muscleGroup,omitempty"`
	Name        *string      `json:"name,omitempty"`
}

// ExercisePlan defines model for ExercisePlan.
type ExercisePlan struct {
	ExerciseId    *int64      `json:"exerciseId,omitempty"`
	Id            *int64      `json:"id,omitempty"`
	Repetitions   *int        `json:"repetitions,omitempty"`
	Sets          *int        `json:"sets,omitempty"`
	WeightUnit    *WeightUnit `json:"weightUnit,omitempty"`
	Weights       *float32    `json:"weights,omitempty"`
	WorkoutPlanId *int64      `json:"workoutPlanId,omitempty"`
}

// MuscleGroup defines model for MuscleGroup.
type MuscleGroup string

// Progress defines model for Progress.
type Progress struct {
	CompletedWorkouts *int64 `json:"completedWorkouts,omitempty"`
	TotalWorkouts     *int64 `json:"totalWorkouts,omitempty"`
}

// Success defines model for Success.
type Success struct {
	// Code A machine-readable error code.
	Code SuccessCode `json:"code"`

	// Message A human-readable error message
	Message string `json:"message"`

	// Payload data that successful responses carried
	Payload *map[string]interface{} `json:"payload,omitempty"`
}

// SuccessCode A machine-readable error code.
type SuccessCode string

// UpdateExercisePlan defines model for UpdateExercisePlan.
type UpdateExercisePlan struct {
	Id          *int64      `json:"id,omitempty"`
	Repetitions *int        `json:"repetitions,omitempty"`
	Sets        *int        `json:"sets,omitempty"`
	WeightUnit  *WeightUnit `json:"weightUnit,omitempty"`
	Weights     *float32    `json:"weights,omitempty"`
}

// UserLogin defines model for UserLogin.
type UserLogin struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// UserSignup defines model for UserSignup.
type UserSignup struct {
	Email    openapi_types.Email `json:"email"`
	Name     string              `json:"name"`
	Password *string             `json:"password,omitempty"`
}

// UserStatus defines model for UserStatus.
type UserStatus struct {
	Email        *openapi_types.Email `json:"email,omitempty"`
	Id           *int64               `json:"id,omitempty"`
	Name         *string              `json:"name,omitempty"`
	WorkoutPlans *[]WorkoutPlan       `json:"workoutPlans,omitempty"`
}

// UserToken defines model for UserToken.
type UserToken = string

// WeightUnit defines model for WeightUnit.
type WeightUnit string

// WorkoutPlan defines model for WorkoutPlan.
type WorkoutPlan struct {
	Comment       *string            `json:"comment"`
	CreatedAt     *time.Time         `json:"createdAt,omitempty"`
	ExercisePlans *[]ExercisePlan    `json:"exercisePlans,omitempty"`
	Id            *int64             `json:"id,omitempty"`
	ScheduledDate *time.Time         `json:"scheduledDate,omitempty"`
	Status        *WorkoutPlanStatus `json:"status,omitempty"`
	UpdatedAt     *time.Time         `json:"updatedAt,omitempty"`
	UserId        *int64             `json:"userId,omitempty"`
}

// WorkoutPlanStatus defines model for WorkoutPlanStatus.
type WorkoutPlanStatus string

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InvalidInput defines model for InvalidInput.
type InvalidInput = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unathorited defines model for Unathorited.
type Unathorited = Error

// ScheduleWorkoutPlan defines model for ScheduleWorkoutPlan.
type ScheduleWorkoutPlan struct {
	ScheduledDate *time.Time `json:"scheduledDate,omitempty"`
}

// UpdateExercisePlans defines model for UpdateExercisePlans.
type UpdateExercisePlans struct {
	ExercisePlans *[]UpdateExercisePlan `json:"exercisePlans,omitempty"`
}

// ListWorkoutPlansParams defines parameters for ListWorkoutPlans.
type ListWorkoutPlansParams struct {
	// Status Filter workout plans by status
	Status *WorkoutPlanStatus `form:"status,omitempty" json:"status,omitempty"`

	// Sort Sort the results by scheduled data and time
	Sort ListWorkoutPlansParamsSort `form:"sort" json:"sort"`
}

// ListWorkoutPlansParamsSort defines parameters for ListWorkoutPlans.
type ListWorkoutPlansParamsSort string

// ScheduleWorkoutPlanbyIdJSONBody defines parameters for ScheduleWorkoutPlanbyId.
type ScheduleWorkoutPlanbyIdJSONBody struct {
	ScheduledDate *time.Time `json:"scheduledDate,omitempty"`
}

// UpdateExercisePlansInWorkoutPlanJSONBody defines parameters for UpdateExercisePlansInWorkoutPlan.
type UpdateExercisePlansInWorkoutPlanJSONBody struct {
	ExercisePlans *[]UpdateExercisePlan `json:"exercisePlans,omitempty"`
}

// LoginUserJSONRequestBody defines body for LoginUser for application/json ContentType.
type LoginUserJSONRequestBody = UserLogin

// SignupUserJSONRequestBody defines body for SignupUser for application/json ContentType.
type SignupUserJSONRequestBody = UserSignup

// CreateWorkoutPlanJSONRequestBody defines body for CreateWorkoutPlan for application/json ContentType.
type CreateWorkoutPlanJSONRequestBody = CreateWorkoutPlan

// CompleteWorkoutPlanbyIdJSONRequestBody defines body for CompleteWorkoutPlanbyId for application/json ContentType.
type CompleteWorkoutPlanbyIdJSONRequestBody = CompleteWorkoutPlan

// ScheduleWorkoutPlanbyIdJSONRequestBody defines body for ScheduleWorkoutPlanbyId for application/json ContentType.
type ScheduleWorkoutPlanbyIdJSONRequestBody ScheduleWorkoutPlanbyIdJSONBody

// UpdateExercisePlansInWorkoutPlanJSONRequestBody defines body for UpdateExercisePlansInWorkoutPlan for application/json ContentType.
type UpdateExercisePlansInWorkoutPlanJSONRequestBody UpdateExercisePlansInWorkoutPlanJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all exercises
	// (GET /exercises)
	ListExercises(w http.ResponseWriter, r *http.Request)
	// get an exercise by a specific id
	// (GET /exercises/{exerciseId})
	GetExerciseById(w http.ResponseWriter, r *http.Request, exerciseId int64)
	// generate report on workout
	// (GET /report/progress)
	ReportProgress(w http.ResponseWriter, r *http.Request)
	// Authenticate user and get an access token.
	// (POST /user/login)
	LoginUser(w http.ResponseWriter, r *http.Request)
	// Logs out current logged in user.
	// (POST /user/logout)
	LogoutUser(w http.ResponseWriter, r *http.Request)
	// Register a new user.
	// (POST /user/signup)
	SignupUser(w http.ResponseWriter, r *http.Request)
	// Get user information.
	// (GET /user/status)
	GetUserStatus(w http.ResponseWriter, r *http.Request)
	// List workout plans
	// (GET /workouts)
	ListWorkoutPlans(w http.ResponseWriter, r *http.Request, params ListWorkoutPlansParams)
	// create a workout plan
	// (POST /workouts)
	CreateWorkoutPlan(w http.ResponseWriter, r *http.Request)
	// delete a workout plan by a specific id
	// (DELETE /workouts/{workoutId})
	DeleteWorkoutPlanbyId(w http.ResponseWriter, r *http.Request, workoutId int64)
	// get a workout plan by a specific id
	// (GET /workouts/{workoutId})
	GetWorkoutPlanbyId(w http.ResponseWriter, r *http.Request, workoutId int64)
	// complete a workout plan by a specific id
	// (PUT /workouts/{workoutId}/complete)
	CompleteWorkoutPlanbyId(w http.ResponseWriter, r *http.Request, workoutId int64)
	// schedule a workout plan by a specific id
	// (PUT /workouts/{workoutId}/schedule)
	ScheduleWorkoutPlanbyId(w http.ResponseWriter, r *http.Request, workoutId int64)
	// update exercise plans
	// (PUT /workouts/{workoutId}/update-exercise-plans)
	UpdateExercisePlansInWorkoutPlan(w http.ResponseWriter, r *http.Request, workoutId int64)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// ListExercises operation middleware
func (siw *ServerInterfaceWrapper) ListExercises(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListExercises(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetExerciseById operation middleware
func (siw *ServerInterfaceWrapper) GetExerciseById(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "exerciseId" -------------
	var exerciseId int64

	err = runtime.BindStyledParameterWithOptions("simple", "exerciseId", r.PathValue("exerciseId"), &exerciseId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "exerciseId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetExerciseById(w, r, exerciseId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ReportProgress operation middleware
func (siw *ServerInterfaceWrapper) ReportProgress(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ReportProgress(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LoginUser operation middleware
func (siw *ServerInterfaceWrapper) LoginUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LoginUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// LogoutUser operation middleware
func (siw *ServerInterfaceWrapper) LogoutUser(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.LogoutUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// SignupUser operation middleware
func (siw *ServerInterfaceWrapper) SignupUser(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.SignupUser(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUserStatus operation middleware
func (siw *ServerInterfaceWrapper) GetUserStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUserStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ListWorkoutPlans operation middleware
func (siw *ServerInterfaceWrapper) ListWorkoutPlans(w http.ResponseWriter, r *http.Request) {

	var err error

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params ListWorkoutPlansParams

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", true, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Required query parameter "sort" -------------

	if paramValue := r.URL.Query().Get("sort"); paramValue != "" {

	} else {
		siw.ErrorHandlerFunc(w, r, &RequiredParamError{ParamName: "sort"})
		return
	}

	err = runtime.BindQueryParameter("form", true, true, "sort", r.URL.Query(), &params.Sort)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sort", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ListWorkoutPlans(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateWorkoutPlan operation middleware
func (siw *ServerInterfaceWrapper) CreateWorkoutPlan(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateWorkoutPlan(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWorkoutPlanbyId operation middleware
func (siw *ServerInterfaceWrapper) DeleteWorkoutPlanbyId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workoutId" -------------
	var workoutId int64

	err = runtime.BindStyledParameterWithOptions("simple", "workoutId", r.PathValue("workoutId"), &workoutId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workoutId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWorkoutPlanbyId(w, r, workoutId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWorkoutPlanbyId operation middleware
func (siw *ServerInterfaceWrapper) GetWorkoutPlanbyId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workoutId" -------------
	var workoutId int64

	err = runtime.BindStyledParameterWithOptions("simple", "workoutId", r.PathValue("workoutId"), &workoutId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workoutId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWorkoutPlanbyId(w, r, workoutId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CompleteWorkoutPlanbyId operation middleware
func (siw *ServerInterfaceWrapper) CompleteWorkoutPlanbyId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workoutId" -------------
	var workoutId int64

	err = runtime.BindStyledParameterWithOptions("simple", "workoutId", r.PathValue("workoutId"), &workoutId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workoutId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CompleteWorkoutPlanbyId(w, r, workoutId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ScheduleWorkoutPlanbyId operation middleware
func (siw *ServerInterfaceWrapper) ScheduleWorkoutPlanbyId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workoutId" -------------
	var workoutId int64

	err = runtime.BindStyledParameterWithOptions("simple", "workoutId", r.PathValue("workoutId"), &workoutId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workoutId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ScheduleWorkoutPlanbyId(w, r, workoutId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UpdateExercisePlansInWorkoutPlan operation middleware
func (siw *ServerInterfaceWrapper) UpdateExercisePlansInWorkoutPlan(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "workoutId" -------------
	var workoutId int64

	err = runtime.BindStyledParameterWithOptions("simple", "workoutId", r.PathValue("workoutId"), &workoutId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "workoutId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateExercisePlansInWorkoutPlan(w, r, workoutId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/exercises", wrapper.ListExercises)
	m.HandleFunc("GET "+options.BaseURL+"/exercises/{exerciseId}", wrapper.GetExerciseById)
	m.HandleFunc("GET "+options.BaseURL+"/report/progress", wrapper.ReportProgress)
	m.HandleFunc("POST "+options.BaseURL+"/user/login", wrapper.LoginUser)
	m.HandleFunc("POST "+options.BaseURL+"/user/logout", wrapper.LogoutUser)
	m.HandleFunc("POST "+options.BaseURL+"/user/signup", wrapper.SignupUser)
	m.HandleFunc("GET "+options.BaseURL+"/user/status", wrapper.GetUserStatus)
	m.HandleFunc("GET "+options.BaseURL+"/workouts", wrapper.ListWorkoutPlans)
	m.HandleFunc("POST "+options.BaseURL+"/workouts", wrapper.CreateWorkoutPlan)
	m.HandleFunc("DELETE "+options.BaseURL+"/workouts/{workoutId}", wrapper.DeleteWorkoutPlanbyId)
	m.HandleFunc("GET "+options.BaseURL+"/workouts/{workoutId}", wrapper.GetWorkoutPlanbyId)
	m.HandleFunc("PUT "+options.BaseURL+"/workouts/{workoutId}/complete", wrapper.CompleteWorkoutPlanbyId)
	m.HandleFunc("PUT "+options.BaseURL+"/workouts/{workoutId}/schedule", wrapper.ScheduleWorkoutPlanbyId)
	m.HandleFunc("PUT "+options.BaseURL+"/workouts/{workoutId}/update-exercise-plans", wrapper.UpdateExercisePlansInWorkoutPlan)

	return m
}
